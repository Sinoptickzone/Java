import java.io.File;
import java.io.IOException;
import java.util.*;

/**
 * –í–∞—à —Ñ–∞–π–ª `input.txt` —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö
 * –ø—Ä–æ–±–µ–ª–∞–º–∏. –≠—Ç–æ —Å–ª–æ–≤–∞-—Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏ –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã.
 * –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∏–∫–Ω–∏–∫! üçéü•ïü•ßüçáüçâ
 * –ó–∞–¥–∞–Ω–∏—è:
 * 1. –û—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤:
 * –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤
 * —Ñ–∞–π–ª–µ `input.txt`.
 * 2. –ù–∞–π—Ç–∏ —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:
 * –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤
 * —Ñ–∞–π–ª–µ.
 * 3. –í—ã—á–∏—Å–ª–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —Å–ª–æ–≤:
 * –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥–æ–µ
 * —Å–ª–æ–≤–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ–± —ç—Ç–æ–º –∫–∞–∫ –æ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–æ–≥–æ,
 * –∫–∞–∫–∏–µ —Ñ—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞ –≤–∞—à–µ–º –ø–∏–∫–Ω–∏–∫–µ!
 */

public class Main {
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
    public static int wordCount(Map<String, Integer> map) {
        // –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ map, –ø–æ–ª—É—á–∞–µ–º stream, —Å—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        return map
                .values()
                .stream()
                .reduce(0, Integer::sum);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    public static Optional<String> findLongestWord(Map<String, Integer> map) {
        // –ø–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –∏–∑ map, –ø–æ–ª—É—á–∞–µ–º stream, –Ω–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ –¥–ª–∏–Ω–µ —ç–ª–µ–º–µ–Ω—Ç
        return map
                .keySet()
                .stream()
                .max(Comparator.comparingInt(String::length));
    }

    public static void main(String[] args) {
        String fileName = "resources/input.txt"; // –∏–º—è —Ñ–∞–π–ª–∞
        Map<String, Integer> wordMap = new HashMap<>(); // –∫–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä: —Å–ª–æ–≤–æ-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

        // —Å–æ–∑–¥–∞—ë–º —Å–∫–∞–Ω–Ω–µ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
        try (Scanner fileScanner = new Scanner(new File(fileName))) {
            // –ø–æ–∫–∞ –µ—Å—Ç—å, —á—Ç–æ —á–∏—Ç–∞—Ç—å
            while (fileScanner.hasNext()) {
                String word = fileScanner.next(); // —á–∏—Ç–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
                // –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ map, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if (wordMap.containsKey(word)) {
                    wordMap.put(word, wordMap.get(word) + 1);
                } else {
                    wordMap.put(word, 1);
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        // –≤—ã–≤–æ–¥–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏ map –≤ –∫–æ–Ω—Å–æ–ª—å
        System.out.println(wordCount(wordMap));
        System.out.println(findLongestWord(wordMap).get());
        System.out.println(wordMap);
    }
}
